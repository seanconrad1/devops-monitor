services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cloudops-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevents overwriting node_modules

    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - backend
    environment:
      - NODE_ENV=development

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudops-backend
    environment:
      DATABASE_URL: mongodb://mongo:27017/devops_dashboard
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - mongo

  mongo:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: devops_dashboard

    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    # healthcheck:
    #   test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo-db:27017'}]}) }" | mongosh --port 27017 --quiet

    #   interval: 5s
    #   timeout: 30s
    #   start_period: 0s
    #   start_interval: 1s
    #   retries: 30

    volumes:
      - ./init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
      - mongo_data:/data/db
      - mongo_replica:/data/replicadb
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  mongo_data:
  mongo_replica:

networks:
  app-network:
    driver: bridge
